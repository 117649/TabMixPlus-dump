<?xml version="1.0"?>

<bindings id="preference-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="checkbox_tmp" display="xul:hbox">
    <content preference-editable="true">
      <xul:checkbox anonid="checkbox" xbl:inherits="label,align,style,accesskey,crop,flex,disabled"/>
    </content>
    <implementation>
      <field name="_checkbox">document.getAnonymousElementByAttribute(this, "anonid", "checkbox");</field>
      <property name="label" onget="return this._checkbox.label;"
                            onset="return this._checkbox.label = val;"/>
      <property name="value" onget="return this._checkbox.checked;"
                            onset="return this.checked = val;"/>
      <property name="checked" onget="return this._checkbox.checked;"
                            onset="return this._checkbox.checked = val;"/>
      <property name="disabled" onget="return this._checkbox.disabled;"
                            onset="return this._checkbox.disabled = val;"/>
    </implementation>
  </binding>

  <binding id="checkbox"
           extends="chrome://global/content/bindings/checkbox.xml#checkbox">
    <content>
      <xul:image class="checkbox-check" xbl:inherits="checked,disabled"/>
      <xul:hbox class="checkbox-label-box" xbl:inherits="flex=flexlabel">
        <xul:image class="checkbox-icon" xbl:inherits="src"/>
        <xul:label class="checkbox-label" xbl:inherits="xbl:text=label,accesskey,crop,flex=flexlabel"/>
      </xul:hbox>
    </content>
  </binding>

  <binding id="preference"
           extends="chrome://global/content/bindings/preferences.xml#preference">
    <implementation>
      <constructor>
        <![CDATA[
          var update = Tabmix.isVersion(320, 270) ? "" : " && aUpdate";
          Tabmix.changeCode(this, "_setValue")._replace(
            'return aValue;',
            'else if (!this.instantApply' + update + ' && this.value === aValue) {' +
            '  gPrefWindow.updateApplyButton({target: this});}' +
            '$&'
          ).toCode();
        ]]>
      </constructor>
    </implementation>
  </binding>

  <binding id="preference-60"
           extends="chrome://tabmixplus/content/preferences/preferences.xml#preference">
    <implementation>
      <constructor>
        <![CDATA[
          var update = Tabmix.isVersion(320, 270) ? "" : " && aUpdate";
          Tabmix.changeCode(this, "_setValue")._replace(
            'return aValue;',
            'else if (!this.instantApply' + update + ' && this.value === aValue) {' +
            '  gPrefWindow.updateApplyButton({target: this});}' +
            '$&'
          ).toCode();
        ]]>
      </constructor>
    </implementation>
  </binding>

</bindings>
