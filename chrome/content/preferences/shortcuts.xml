<?xml version="1.0"?>

<!DOCTYPE bindings [
<!ENTITY % shortcutsDTD SYSTEM "chrome://tabmixplus/locale/shortcuts.dtd" >
%shortcutsDTD;
]>

<bindings id="tmp_shortcuts"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="shortcut">
    <content>
      <xul:hbox align="start" class="shortcut-content">
        <xul:description xbl:inherits="disabled=blocked" flex="1"/>
        <xul:textbox class="shortcut-edit-box" anonid="editBox" style="width:200px;"
                     xbl:inherits="value,disabled=blocked" context=" "
                     placeholder="&shortcuts.placeholder;"
                     onkeydown="document.getBindingParent(this).onKeyDown(event);"
                     onkeypress="document.getBindingParent(this).handleKeyEvents(event);"
                     onfocus="document.getBindingParent(this).updateFocus(true);"
                     onblur="document.getBindingParent(this).updateFocus(false);"
                     onmousedown="event.stopPropagation(); event.preventDefault(); this.select();"
                     onchange="event.stopPropagation();">
          <xul:image anonid="reset" class="shortcut-image" tooltiptext="&shortcuts.reset;" hidden="true"
                     onclick="document.getBindingParent(this).resetKey();"/>
          <xul:image anonid="disable" class="shortcut-image" tooltiptext="&shortcuts.clear;"
                     onclick="document.getBindingParent(this).disableKey();"/>
        </xul:textbox>
      </xul:hbox>
      <xul:vbox anonid="notificationbox" class="shortcut-notificationbox"
                inuse="&shortcuts.inuse;" flex="1"/>
    </content>
    <implementation>

      <method name="valueFromPreferences">
        <parameter name="aKeyData"/>
        <body><![CDATA[
          this.editBox.previousSibling.textContent = this.getAttribute("label");
          if (!aKeyData.value && !this._key)
            return false;
          this.key = Shortcuts.keyParse(aKeyData.value);
          // trigger this.defaultPref getter on first run
          this.setAttribute("default", this.defaultPref == aKeyData.value && !this.disabled);
          return this.updateNotification();
        ]]></body>
      </method>

      <method name="updateFocus">
        <parameter name="onFocus"/>
        <body><![CDATA[
          if (onFocus) {
            this.editBox.select();
            $('shortcuts-panel').editBox = this.editBox;
          }
          this.setAttribute("focused", onFocus);
        ]]></body>
      </method>

      <method name="applyNewValue">
        <parameter name="aNewValue"/>
        <parameter name="aDisabled"/>
        <body><![CDATA[
          var newValue = (aDisabled ? "d&" : "") + (aNewValue || "").replace(/^d&/, "");
          if (newValue != Shortcuts.keyStringify(this.key)) {
            let newKey = Shortcuts.keyParse(newValue);
            newKey.disabled = aDisabled;
            this.key = newKey;
            this.setAttribute("default", !this.disabled && this.defaultPref == newValue);
            this.parentNode.keys[this.id] = newValue;
            this.parentNode.value = TabmixSvc.JSON.stringify(this.parentNode.keys);
            Shortcuts.prefsChangedByTabmix = true;
            $("pref_shortcuts").value = this.parentNode.value;
            Shortcuts.prefsChangedByTabmix = false;
            let callBack = shortcut => shortcut.id && shortcut.updateNotification();
            gMenuPane.updateShortcuts(this.parentNode, callBack);
          }
          this.editBox.select();
        ]]></body>
      </method>

      <method name="resetKey">
        <body><![CDATA[
          this.applyNewValue(this.defaultPref, false);
        ]]></body>
      </method>

      <method name="disableKey">
        <body><![CDATA[
          if (!this.disabled)
            this.applyNewValue("", true);
        ]]></body>
      </method>

      <method name="updateNotification">
        <body><![CDATA[
          var shortcut = !this.disabled && getFormattedKey(this.key);
          var usedKey = shortcut && getKeysForShortcut(shortcut, this.keyid);
          var box = this.notificationbox;
          while (box.hasChildNodes()) {
            box.firstChild.remove();
          }
          if (usedKey) {
            let msg = (box.getAttribute("inuse") + ":\n" + usedKey).split("\n");
            for (let i = 0, l = msg.length; i < l; i++) {
              let node = document.createElement("description");
              node.setAttribute("value", msg[i]);
              box.appendChild(node);
            }
            if (!this.hasAttribute("used"))
              this.setAttribute("used", true);
          } else {
            this.removeAttribute("used");
          }
          return usedKey;
        ]]></body>
      </method>

      <method name="onKeyDown">
        <parameter name="event"/>
        <body><![CDATA[
          // handle Ctrl/Command + W
          var control = !event.shiftKey && (event.ctrlKey || event.metaKey);
          if (control && event.keyCode == 87)
            this.handleKeyEvents(event, true);
        ]]></body>
      </method>

      <method name="handleKeyEvents">
        <parameter name="event"/>
        <parameter name="ctrl_w"/>
        <body><![CDATA[
          event.preventDefault();
          event.stopPropagation();
          event.stopImmediatePropagation();

          var key = {modifiers: "", key: "", keycode: ""};
          let modifiers = ["ctrl", "meta", "alt", "shift"];
          key.modifiers = modifiers.filter(mod => event[mod + "Key"])
              .join(",").replace("ctrl", "control");

          if (!key.modifiers) {
            // Return and Esc blur the edit box
            if (event.keyCode == event.DOM_VK_RETURN ||
                event.keyCode == event.DOM_VK_ESCAPE) {
              this.editBox.blur();
              return;
            }

            // Delete and Backspace disable the key
            if (event.keyCode == event.DOM_VK_DELETE ||
                event.keyCode == event.DOM_VK_BACK_SPACE) {
              this.disableKey();
              return;
            }
          } else if (this.key && this.key.modifiers.indexOf("accel") > -1) {
            // when current modifier is accel replace new modifier with accel
            // if it match ui.key.accelKey
            key.modifiers = key.modifiers.replace(Shortcuts.getPlatformAccel(), "accel");
          }

          if (event.charCode == event.DOM_VK_SPACE)
            key.keycode = "VK_SPACE";
          else if (event.charCode)
            key.key = String.fromCharCode(event.charCode).toUpperCase();
          else {
            let eKeyCode = event.keyCode;
            if (eKeyCode == 8)
              key.keycode = "VK_BACK";
            for (let keycode of Object.keys(KeyboardEvent)) {
              let val = KeyboardEvent[keycode];
              if (val == eKeyCode) {
                let str = ctrl_w ? "DOM_VK_" : "DOM_";
                key.keycode = keycode.replace(str, "");
                break;
              }
            }
            if (!key.keycode)
              return;
          }

          var newValue = Shortcuts.validateKey(key) || Shortcuts.keyStringify(this.key);
          this.applyNewValue(newValue, false);
        ]]></body>
      </method>

      <property name="keyid" readonly="true" onget="return Shortcuts.keys[this.id].id || 'key_tm_' + this.id;"/>
      <property name="blocked" onget="return this.hasAttribute('blocked');">
        <setter><![CDATA[
          if (val != this.blocked) {
            if (val)
              this.setAttribute("blocked", "true");
            else
              this.removeAttribute("blocked");
          }
          return val;
        ]]></setter>
      </property>

      <property name="disabled" onget="return !this._key || this._key.disabled;">
        <setter><![CDATA[
          this._key.disabled = val;
          return val;
        ]]></setter>
      </property>

      <property name="value" onget="return this.getAttribute('value');">
        <setter><![CDATA[
          if (this.value != val)
            this.setAttribute("value", val);
          return val;
        ]]></setter>
      </property>

      <field name="_key">null</field>
      <property name="key" onget="return this._key;">
        <setter><![CDATA[
          this._key = val;
          this.value = val.disabled ? "" : getFormattedKey(val);
          return val;
        ]]></setter>
      </property>

      <property name="defaultPref" readonly="true">
        <getter><![CDATA[
          var defaultVal = (Shortcuts.keys[this.id].default || "").replace(/^d&/, "");
          if (defaultVal) {
            let resetButton = document.getAnonymousElementByAttribute(this, "anonid", "reset");
            resetButton.hidden = false;
            let defaultKey = getFormattedKey(Shortcuts.keyParse(defaultVal));
            resetButton.setAttribute("tooltiptext",
              resetButton.getAttribute("tooltiptext") + "\nDefault is: " + defaultKey);
          }
          this.__defineGetter__("defaultPref", () => defaultVal);
          return defaultVal;
        ]]></getter>
      </property>

      <field name="notificationbox">document.getAnonymousElementByAttribute(this, "anonid", "notificationbox");</field>
      <field name="editBox">document.getAnonymousElementByAttribute(this, "anonid", "editBox");</field>
    </implementation>
  </binding>

</bindings>
